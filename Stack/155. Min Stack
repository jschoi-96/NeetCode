//Time: O(1)
//Space: O(1)

// Approach Method: By creating two stack, minStack is keep pushing minimum value to the top in order to perform getMin() function in O(1) time.

class MinStack {
private:
    stack<int> s;
    stack<int> minStack;
public:
    
    MinStack() {}
    
    void push(int val) {
        s.push(val);
        if (minStack.empty() || val <= getMin()){
            minStack.push(val);
        }
        else{
            minStack.push(minStack.top());
        }
    }
    
    void pop() {
        
        s.pop();
        minStack.pop();
        
    }
    
    int top() {
        return s.top();
    }
    
    int getMin() {
        return minStack.top();
    }
    
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
