// Time: O(logN)
// Space: O(1)

1. I used Two-Pointer Approach
class Solution {
public:
    int search(vector<int>& nums, int target) {
        
        int left = 0, right = nums.size() - 1;
        
        while (left <= right){
            if (nums[left] == target){
                return left;
            }
            
            else if (nums[right] == target){
                return right;
            }
            
            left++;
            right--;
        }
        return -1;
    }
};

** Binary Search Approach
int search(vector<int>& nums, int target) {
        int n = nums.size()-1;
        int low = 0, high = n;
        while( low <= high){
            int mid = low + (high-low)/2;
            if (nums[mid] == target) return mid;
            else if (nums[mid] > target) high = mid -1;
            else low = mid + 1;
        }
        return -1;
  }
