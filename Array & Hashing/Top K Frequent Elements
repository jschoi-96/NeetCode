// time complexity: O(nlogk)
// another approach -> bucket sort

ascending order로 sort 하려는 생각은 했지만, map 형태에서 sort하기가 쉽지않아서 discussion을 보고 priority queue를 쓰는것을 확인

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        // 등장횟수? 
        unordered_map<int,int> m;
        vector<int> result;
        for(int i = 0; i < nums.size(); i++){
            m[nums[i]]++; // m[1] = 3 , m[2] = 2 , m[3] = 1
        }
        
        priority_queue<pair<int,int>> pq;
        for(auto x : m){
            pq.push({x.second , x.first});
        }
        
        while(k--){
            result.push_back(pq.top().second);
            pq.pop();
        }
        return result;
    }
};
